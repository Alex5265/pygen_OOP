# Класс BirthdayDict
# Реализуйте класс BirthdayDict, наследника класса UserDict, описывающий словарь с информацией о днях рождения, ключами в котором являются имена, а значениями — даты дней рождения. Процесс создания экземпляра класса BirthdayDict должен совпадать с процессом создания экземпляра класса UserDict.
#
# При добавлении новой пары ключ: значение в экземпляр класса BirthdayDict должна производиться проверка на наличие в этом экземпляре пары, которая имеет такое же значение, что и добавляемая пара. И если такая пара есть, должен выводиться текст:
#
# Хей, <ключ добавляемой пары>, не только ты празднуешь день рождения в этот день!
# Аналогичное поведение должно быть и при изменении значения по ключу.
#
# Примечание 1. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный класс используется только с корректными данными.
#
# Примечание 2. Никаких ограничений касательно реализации класса BirthdayDict нет, она может быть произвольной.


from collections import UserDict


class BirthdayDict(UserDict):
    def __setitem__(self, key, item) -> None:
        if item in self.values():
            print(f"Хей, {key}, не только ты празднуешь день рождения в этот день!")
        return super().__setitem__(key, item)



from datetime import date

birthdaydict = BirthdayDict()

birthdaydict['Боб'] = date(1987, 6, 15)
birthdaydict['Том'] = date(1984, 7, 15)
birthdaydict['Мария'] = date(1987, 6, 15)
print()


from datetime import date

birthdaydict = BirthdayDict()

birthdaydict['Боб'] = date(1987, 6, 15)
birthdaydict['Том'] = date(1984, 7, 15)
birthdaydict['Мария'] = date(1989, 10, 1)
birthdaydict['Боб'] = date(1989, 10, 1)







