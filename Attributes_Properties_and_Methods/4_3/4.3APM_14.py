# Класс Wordplay
# Будем называть словом любую последовательность из одной или более латинских букв.
#
# Реализуйте класс Wordplay, описывающий расширяемый набор слов. При создании экземпляра класс должен принимать один аргумент:
#
# words — список, определяющий начальный набор слов. Если не передан, начальный набор слов считается пустым
# Экземпляр класса Wordplay должен иметь один атрибут:
#
# words — список, содержащий набор слов
# Класс Wordplay должен иметь четыре метода экземпляра:
#
# add_word() — метод, принимающий в качестве аргумента слово и добавляющий его в набор. Если слово уже есть в наборе, метод ничего не должен делать
# words_with_length() — метод, принимающий в качестве аргумента натуральное число n и возвращающий список слов из набора, длина которых равна n
# only() — метод, принимающий произвольное количество аргументов — букв, и возвращающий список всех слов из набора, которые включают в себя только переданные буквы
# avoid() — метод, принимающий произвольное количество аргументов — букв, и возвращающий список всех слов из набора, которые не содержат ни одну из этих букв
# Примечание 1. Слова в списках, возвращаемых методами words_with_length(), only() и avoid(), должны располагаться в том порядке, в котором они были добавлены.
#
# Примечание 2. Экземпляр класса Wordplay не должен зависеть от списка, на основе которого он был создан. Другими словами, если исходный список изменится, то экземпляр класса Wordplay измениться не должен.
#
# Примечание 3. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный класс используется только с корректными данными.

class Wordplay:
    def __init__(self, words=None):
        if words is None:
            self.words = []
        else:
            self.words = words[:]

    def add_word(self, word):
        if word not in self.words:
            self.words.append(word)

    def words_with_length(self, n):
        return list(filter(lambda x: len(x) == n, self.words))

    def only(self, *args):
        return list(filter(lambda x: all(ch in args for ch in x), self.words))

    def avoid(self, *args):
        return list(filter(lambda x: not any(ch in args for ch in x ), self.words))

wordplay = Wordplay(['Тьюринг', 'Торвальдс', 'Россум', 'Гейтс', 'Гамильтон', 'Бэкус', 'Кнут'])

print(wordplay.words_with_length(6))
print(wordplay.avoid('ь'))
print()

wordplay = Wordplay(['a', 'arthur', 'timur', 'bee', 'geek', 'python', 'stepik'])
print(wordplay.avoid('a', 'b', 'c'))

print()
wordplay = Wordplay(['o', 'to', 'otto', 'top', 't'])
print(wordplay.only('o', 't'))